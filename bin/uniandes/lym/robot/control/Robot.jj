/*
Gramatica para el Robot:
Autor: Alejandro Arango
Modificado por: Silvia Takahashi
Modificado por: Juan Pablo Morales.
Agregadas producciones para manejar globos
Modificado por Silvia Takahashi


 **/


options 
{
  
	LOOKAHEAD=1; 
	IGNORE_CASE=true;
	STATIC = false;
	
}
   

PARSER_BEGIN(Robot)

package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;
 
import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;

@SuppressWarnings("serial")
public class Robot 
{


	private RobotWorldDec world;
	
	
	void setWorld(RobotWorld w) {
		world = (RobotWorldDec) w;	
	}

	String salida=new String();
}
PARSER_END(Robot)

SKIP:
{
	" "
	|	"\r"
	|	"\t"
	| "\n"
}



TOKEN: /* Nombres de Comandos */
{

	<MOVE:  "MOVE">|	//(NUM) -> move forward num steps
	<RIGHT: "right">|
	<PUT: "PUT">|		// (chips|balloons, num) -> drop num chips|balloons
	<PICK: "PICK">|		// (chips|balloons, num) -> pickup num chips|baloons
	< POP: "POP" >|		// (num) -> pop num balloons
    < HOP:  "HOP" >|	// (num) -> hop num positions forward
   	<GO: "GO" >			// (num, num) -> go to the position num,num. [x,y] en el enunciado

}

TOKEN: // Comandos pt2
{
  < ASSIGNTO: "assignTo" >|
  < GOTO: "goto" >|
  < TURN: "turn" >|
  < FACE: "face" >|
  < MOVETOTHE: "moveToThe" >|
  < MOVEINDIR: "moveInDir" >|
  < JUMPTOTHE: "jumpToThe" >|
  < JUMPINDIR: "jumpInDir" >|
  < NOP: "nop" >
}

TOKEN: // Estructuras de control
{
  < IF: "if" >|
  < THEN: "then" >|
  < ELSE: "else" >|

  < WHILE: "while" >|
  < DO: "do" >|

  < REPEAT: "repeat" >
}

TOKEN: // Condiciones
{
  < FACING: "facing" >|
  < CANPUT: "canPut" >|
  < CANPICK: "canPick" >|
  < CANMOVEINDIR: "canMoveInDir" >|
  < CANJUMPINDIR: "canJumpInDir" >|
  < CANMOVETOTHE: "canMoveToThe" >|
  < CANJUMPTOTHE: "canJumpToThe" >|
  < NOT: "not" >
}

TOKEN: //Tipos de datos
{
  
// D: (EN ALGUNAS PARTES DE EL ENUNCIADO ES O)
  
  < FRONT: "FRONT" >|
  < LEFT: "LEFT" >|
  < BACK: "BACK" >|

  < AROUND: "AROUND" >|
  
  // O: (EN ALGUNAS PARTES DEL ENUNCIADO ES D)
  < NORTH: "NORTH" >|
  < SOUTH: "SOUTH" >|
  < EAST: "EAST" >|
  < WEST: "WEST" >|

  < NUM : (["0"-"9"])+>| /* n, x, y entran en la categoria de numero*/
  < CHIPS : "CHIPS">| // X
  < BALLOONS: "BALLOONS" >| // X
  < NAME: (< STR >)+ >| // cualquier string (variables nombres de procedimientos etc)
  < #STR: ["a"-"z"]|["A"-"Z"]>
  
}




	//boolean command(uniandes.lym.robot.view.Console sistema) :
	boolean command(Console sistema): // Comandos1
	{	
		int x,y;
		salida=new String();	
	}

	{
		(		  (
		   <RIGHT> "(" ");" {world.turnRight();salida = "Command: Turnright";}
		| 	<MOVE>  "(" x=num() ");" {world.moveForward(x,false);salida = "Command: Moveforward ";}  
		| 	<HOP>  "(" x=num() ");" {world.moveForward(x,true);salida = "Command:Jumpforward ";}
		| 	<GO>  "(" x=num() "," y=num()");" {world.setPostion(x,y);salida = "Command:GO ";}  
		|  <PUT> "("  put() ");"					  			
		|  <PICK> "(" get()  ");"	
	    |  < POP > "(" x=num() ");" {world.popBalloons(x); salida = "Comando:  Pop";}
		) 

		{
		    try {
	    			 Thread.sleep(900);
	    	    } catch (InterruptedException e) {
	    			        System.err.format("IOException: %s%n", e);
	    		    }
	    			 
			sistema.printOutput(salida);
			return true;
		})

    	| <EOF> {return false;} 
	}

	

	void command2(Console sistema):
	{}
	
	{
	  < ASSIGNTO > ":" num() "," < NAME >
	| < GOTO > ":" num() "," num()
	| < MOVE > ":" num()
	| < TURN > ":" (< LEFT >|< RIGHT >|< AROUND >)
	| < FACE > ":" (< NORTH >|< SOUTH >|< EAST >|< WEST >)
	| < PUT > ":" num() "," (< BALLOONS >|< CHIPS >)
	| < PICK > ":" num() "," (< BALLOONS >|< CHIPS >)
	| < MOVETOTHE > ":" num() "," (< FRONT >|< RIGHT >|< LEFT >|< BACK >)
	| < MOVEINDIR > ":" num() "," (< NORTH >|< SOUTH >|< EAST >|< WEST >)
	| < JUMPTOTHE > ":" num() "," (< FRONT >|< RIGHT >|< LEFT >|< BACK >)
	| < JUMPINDIR > ":" num() "," (< NORTH >|< SOUTH >|< EAST >|< WEST >)
	| < NOP > ":"
	}

	void conditions(Console sistema):
	{}
	{
	  < FACING > ":" < NORTH >|< SOUTH >|< EAST >|< WEST >
	| < CANPUT > ":" num() "," (< BALLOONS >|< CHIPS >)
	| < CANPICK > ":" num() "," (< BALLOONS >|< CHIPS >)
	| < CANMOVEINDIR > ":" num() "," (< NORTH >|< SOUTH >|< EAST >|< WEST >)
	| < CANJUMPINDIR > ":" num() "," (< NORTH >|< SOUTH >|< EAST >|< WEST >)
	| < CANMOVETOTHE > ":" num() "," (< FRONT >|< RIGHT >|< LEFT >|< BACK >)
	| < CANJUMPTOTHE > ":" num() "," (< FRONT >|< RIGHT >|< LEFT >|< BACK >)
//	| < NOT > ":" (conditions()) Se debe corregir... no se puede llamar la funcion conditions dentro de si misma
	}


	void put() :
	{
		int f=1;	
	}
	{
		( <CHIPS>    "," f=num() {world.putChips(f); salida = "Command:  Put Chips"; })
		|  	  ( <BALLOONS>   "," f=num() {world.putBalloons(f); salida = "Command:  Put Balloons";})	 

	}

	void get() :
	{
		int f=1;	
	}
	{
		( <CHIPS>   "," f=num() {world.pickChips(f);salida = "Command:  Pick chips";})
		|  	  ( <BALLOONS>   "," f=num() {world.grabBalloons(f);salida="Command:  Pick balloons";})	 

	}

	
	

	/**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */

	int num() throws Error:
	{	
		int total=1;
	}
	{
		<NUM>
		{
			try 
			{
				total = Integer.parseInt(token.image);
			} 
			catch (NumberFormatException ee) 
			{
				throw new Error("Numero fuera de rango: "+token.image+" !!");
			}
			return total;
		}
	}

	