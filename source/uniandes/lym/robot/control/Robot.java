/* Generated By:JavaCC: Do not edit this line. Robot.java */
package uniandes.lym.robot.control;

import uniandes.lym.robot.kernel.*;
import uniandes.lym.robot.view.Console;

import java.awt.Point;
import java.io.*;
import java.util.Vector;
import java.util.LinkedList;
import java.util.*;


@SuppressWarnings("serial")


public class Robot implements RobotConstants {

        ArrayList<String> listaVariables = new ArrayList<String>();

        Map<String, Integer> mapaVariables = new HashMap<String, Integer >();

        boolean ejecutar = false;

        private RobotWorldDec world;


        void setWorld(RobotWorld w) {
                world = (RobotWorldDec) w;
        }

        String salida="";

// ----------------------------------PRODUCCIONES----------------------------------



        //boolean command(uniandes.lym.robot.view.Console sistema) :
  final public boolean command(Console sistema) throws ParseException {
                int x,y;
                salida=new String();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE:
    case RIGHT:
    case PUT:
    case PICK:
    case POP:
    case HOP:
    case GO:
    case ROBOT_R:
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case RIGHT:
        jj_consume_token(RIGHT);
        jj_consume_token(51);
        jj_consume_token(52);
                                     world.turnRight();salida = "Command: Turnright";
        break;
      case MOVE:
        jj_consume_token(MOVE);
        jj_consume_token(51);
        x = num();
        jj_consume_token(52);
                                                  world.moveForward(x,false);salida = "Command: Moveforward ";
        break;
      case HOP:
        jj_consume_token(HOP);
        jj_consume_token(51);
        x = num();
        jj_consume_token(52);
                                                 world.moveForward(x,true);salida = "Command:Jumpforward ";
        break;
      case GO:
        jj_consume_token(GO);
        jj_consume_token(51);
        x = num();
        jj_consume_token(53);
        y = num();
        jj_consume_token(52);
                                                           world.setPostion(x,y);salida = "Command:GO ";
        break;
      case PUT:
        jj_consume_token(PUT);
        jj_consume_token(51);
        put();
        jj_consume_token(52);
        break;
      case PICK:
        jj_consume_token(PICK);
        jj_consume_token(51);
        get();
        jj_consume_token(52);
        break;
      case POP:
        jj_consume_token(POP);
        jj_consume_token(51);
        x = num();
        jj_consume_token(52);
                                         world.popBalloons(x); salida = "Comando:  Pop";
        break;
      case ROBOT_R:
        robot();
        break;
      default:
        jj_la1[0] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
                    try {
                                 Thread.sleep(900);
                    } catch (InterruptedException e) {
                                        System.err.format("IOException: %s%n", e);
                            }

                        sistema.printOutput(salida);
                        {if (true) return true;}
      break;
    case 0:
      jj_consume_token(0);
                 {if (true) return false;}
      break;
    default:
      jj_la1[1] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

  final public void command2() throws ParseException {
                Token name = new Token();
                int num = 0;

                int xInt = -1;
                int yInt = -1;
                Token xVar = new Token();
                Token yVar = new Token();
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case ASSIGNTO:
      assignTo();
      break;
    case GOTO:
      goTo();
      break;
    case MOVE:
      move();
      break;
    case TURN:
      turn();
      break;
    case FACE:
      face();
      break;
    case PUT:
      putN();
      break;
    case PICK:
      pickN();
      break;
    case MOVETOTHE:
      moveToThe();
      break;
    case MOVEINDIR:
      moveInDir();
      break;
    case JUMPTOTHE:
      jumpToThe();
      break;
    case JUMPINDIR:
      jumpInDir();
      break;
    case NOP:
      jj_consume_token(NOP);
      jj_consume_token(54);
      break;
    default:
      jj_la1[2] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public Boolean conditions() throws ParseException {
          Token name = new Token();
                int num = 0;
                boolean bool;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FACING:
      bool = facing();
                           {if (true) return bool;}
      break;
    case CANPUT:
      bool = canPut();
                           {if (true) return bool;}
      break;
    case CANPICK:
      bool = canPick();
                            {if (true) return bool;}
      break;
    case CANMOVEINDIR:
      bool = canMoveInDir();
                                 {if (true) return bool;}
      break;
    case CANJUMPINDIR:
      bool = canJumpInDir();
                                 {if (true) return bool;}
      break;
    case CANMOVETOTHE:
      bool = canMoveToThe();
                                 {if (true) return bool;}
      break;
    case CANJUMPTOTHE:
      bool = canJumpToThe();
                                 {if (true) return bool;}
      break;
    case NOT:
      bool = conditionNot();
                                 {if (true) return bool;}
      break;
    default:
      jj_la1[3] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    throw new Error("Missing return statement in function");
  }

// ----------------------------METODOS DE COMANDOS----------------------------
  final public void put() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      jj_consume_token(53);
      f = num();
                                          world.putChips(f); salida = "Command:  Put Chips";
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      jj_consume_token(53);
      f = num();
                                                      world.putBalloons(f); salida = "Command:  Put Balloons";
      break;
    default:
      jj_la1[4] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void get() throws ParseException {
                int f=1;
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case CHIPS:
      jj_consume_token(CHIPS);
      jj_consume_token(53);
      f = num();
                                         world.pickChips(f);salida = "Command:  Pick chips";
      break;
    case BALLOONS:
      jj_consume_token(BALLOONS);
      jj_consume_token(53);
      f = num();
                                                      world.grabBalloons(f);salida="Command:  Pick balloons";
      break;
    default:
      jj_la1[5] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void assignTo() throws ParseException {
          Token name = new Token();
                int num = 0;
    jj_consume_token(ASSIGNTO);
    jj_consume_token(54);
    num = num();
    jj_consume_token(53);
    name = jj_consume_token(NAME);
            if(ejecutar == true) {
              if(listaVariables.contains(name.image)) {
              mapaVariables.put(name.image, num);
            } else {
              {if (true) throw new Error("La variable '"+name.image+"' debe ser declarada antes de usarse.");}
            }
            }

            salida += "Command: ASSIGNTO: " + num + "," + name + "\u005cn";
  }

  final public void goTo() throws ParseException {
                int xInt = -1;
                int yInt = -1;
                Token xVar = new Token();
                Token yVar = new Token();
    jj_consume_token(GOTO);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      xInt = num();
      break;
    case NAME:
      xVar = jj_consume_token(NAME);
      break;
    default:
      jj_la1[6] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      yInt = num();
      break;
    case NAME:
      yVar = jj_consume_token(NAME);
      break;
    default:
      jj_la1[7] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {
            if(xVar.image != null && mapaVariables.containsKey(xVar.image)) {
                  xInt = mapaVariables.get(xVar.image);
                } else if (xVar.image != null && !mapaVariables.containsKey(xVar.image)) {
                  {if (true) throw new Error("La variable "+xVar+" debe ser declarada antes de usarse.");}
                }

                if(yVar.image != null && mapaVariables.containsKey(yVar.image)) {
                  yInt = mapaVariables.get(yVar.image);
                } else if (yVar.image != null && !mapaVariables.containsKey(yVar.image)) {
                  {if (true) throw new Error("La variable "+yVar.image+" debe ser declarada antes de usarse.");}
                }

                try {
                        world.setPostion(xInt,yInt);
                } catch(Exception e) {
                  System.out.println(e);
                }

                salida += "Command: GOTO(" + xInt + "," + yInt + ")";
          }
  }

  final public void move() throws ParseException {
                Token name = new Token();
                int num = 0;
    jj_consume_token(MOVE);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[8] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if (ejecutar == true) {
            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                world.moveForward(num, false);

            }

            salida += "Command: MOVE(" + num + "\u005cn";
  }

        /* La funcion Turn hace que el robot gire 90° en direccion LEFT, RIGHT
	o que gire 180° (AROUND) */
  final public void turn() throws ParseException {
          Token name = new Token();
    jj_consume_token(TURN);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case LEFT:
      name = jj_consume_token(LEFT);
      break;
    case RIGHT:
      name = jj_consume_token(RIGHT);
      break;
    case AROUND:
      name = jj_consume_token(AROUND);
      break;
    default:
      jj_la1[9] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
                if(ejecutar == true) {

                  int facing = world.getFacing();


                  if((name.image).toUpperCase().equals("LEFT")) {
                    world.turnRight();
                    world.turnRight();
                    world.turnRight();


                  } else if((name.image).toUpperCase().equals("RIGHT")) {
                    world.turnRight();


                } else if((name.image).toUpperCase().equals("AROUND")) {
                  world.turnRight();
                  world.turnRight();
                }

                salida += "Command: TURN " + (name.image).toUpperCase() + "\u005cn";
        }
  }

  final public void turnTo(Token name) throws ParseException {
          String fullName = "";

          Map<String, Integer> mapDir = new HashMap<String, Integer >();

          mapDir.put("NORTHEAST", 1); mapDir.put("NORTHSOUTH", 2); mapDir.put("NORTHWEST", 3);

          mapDir.put("EASTSOUTH", 1); mapDir.put("EASTWEST", 2); mapDir.put("EASTNORTH", 3);

          mapDir.put("SOUTHWEST", 1); mapDir.put("SOUTHNORTH", 2); mapDir.put("SOUTHEAST", 3);

          mapDir.put("WESTNORTH", 1); mapDir.put("WESTEAST", 2); mapDir.put("WESTSOUTH", 3);

          if(ejecutar == true) {

              int facing = world.getFacing();

              if (facing == 0) fullName += "NORTH";
              else if (facing == 1) fullName += "SOUTH";
              else if (facing == 2) fullName += "EAST";
              else if (facing == 3) fullName += "WEST";


              if(!fullName.equals((name.image).toUpperCase())) {

                fullName += (name.image).toUpperCase();

                      int timesToRepeat = mapDir.get(fullName);
                      int i = 0;

                      while(i < timesToRepeat) {
                        world.turnRight();
                        i++;
                      }
              }
            }
  }

  final public void face() throws ParseException {
          Token name = new Token();
          String fullName = "";

          Map<String, Integer> mapDir = new HashMap<String, Integer >();

          mapDir.put("NORTHEAST", 1); mapDir.put("NORTHSOUTH", 2); mapDir.put("NORTHWEST", 3);

          mapDir.put("EASTSOUTH", 1); mapDir.put("EASTWEST", 2); mapDir.put("EASTNORTH", 3);

          mapDir.put("SOUTHWEST", 1); mapDir.put("SOUTHNORTH", 2); mapDir.put("SOUTHEAST", 3);

          mapDir.put("WESTNORTH", 1); mapDir.put("WESTEAST", 2); mapDir.put("WESTSOUTH", 3);
    jj_consume_token(FACE);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      name = jj_consume_token(NORTH);
      break;
    case SOUTH:
      name = jj_consume_token(SOUTH);
      break;
    case EAST:
      name = jj_consume_token(EAST);
      break;
    case WEST:
      name = jj_consume_token(WEST);
      break;
    default:
      jj_la1[10] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {

              int facing = world.getFacing();

              if (facing == 0) fullName += "NORTH";
              else if (facing == 1) fullName += "SOUTH";
              else if (facing == 2) fullName += "EAST";
              else if (facing == 3) fullName += "WEST";


              if(!fullName.equals((name.image).toUpperCase())) {

                fullName += (name.image).toUpperCase();

                      int timesToRepeat = mapDir.get(fullName);
                      int i = 0;

                      while(i < timesToRepeat) {
                        world.turnRight();
                        i++;
                      }
              }

              salida += "Command: FACE " + (name.image).toUpperCase() + "\u005cn";
            }
  }

  final public void putN() throws ParseException {
          Token name = new Token();
          Token obj = new Token();
          int num = 1;
    jj_consume_token(PUT);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[11] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BALLOONS:
      obj = jj_consume_token(BALLOONS);
      break;
    case CHIPS:
      obj = jj_consume_token(CHIPS);
      break;
    default:
      jj_la1[12] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {
            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

        if((obj.image).toUpperCase().equals("CHIPS")) {
          world.putChips(num);
          salida += "Command:  PUT CHIPS \u005cn";
        } else {
          world.putBalloons(num);
          salida += "Command:  PUT BALLOONS \u005cn";
        }
          }
  }

  final public void pickN() throws ParseException {
          Token name = new Token();
          Token obj = new Token();
          int num = 1;
    jj_consume_token(PICK);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[13] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BALLOONS:
      obj = jj_consume_token(BALLOONS);
      break;
    case CHIPS:
      obj = jj_consume_token(CHIPS);
      break;
    default:
      jj_la1[14] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {
            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

        if((obj.image).toUpperCase().equals("CHIPS")) {
          world.pickChips(num);
          salida += "Command:  PICK CHIPS \u005cn";
        } else {
          world.grabBalloons(num);
          salida += "Command:  PICK BALLOONS \u005cn";
        }
          }
  }

  final public void moveToThe() throws ParseException {
          int num = 1;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(MOVETOTHE);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[15] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      dir = jj_consume_token(FRONT);
      break;
    case RIGHT:
      dir = jj_consume_token(RIGHT);
      break;
    case LEFT:
      dir = jj_consume_token(LEFT);
      break;
    case BACK:
      dir = jj_consume_token(BACK);
      break;
    default:
      jj_la1[16] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {
              if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                if((dir.image).toUpperCase().equals("FRONT")) {
                  num = num*(-1);
                  world.moveVertically(num, false);
                } else if((dir.image).toUpperCase().equals("BACK")) {
                  world.moveVertically(num, false);
                } else if((dir.image).toUpperCase().equals("LEFT")) {
                  num = num*(-1);
                  world.moveHorizontally(num,false);
                } else {
                  world.moveHorizontally(num,false);
                }

                salida += "Command:  MOVETOTHE " + (dir.image).toUpperCase() + "\u005cn";

            }
  }

  final public void moveInDir() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(MOVEINDIR);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[17] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      dir = jj_consume_token(NORTH);
      break;
    case SOUTH:
      dir = jj_consume_token(SOUTH);
      break;
    case EAST:
      dir = jj_consume_token(EAST);
      break;
    case WEST:
      dir = jj_consume_token(WEST);
      break;
    default:
      jj_la1[18] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {

              if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                turnTo(dir);

              if((dir.image).toUpperCase().equals("NORTH")) {
                  num = num*(-1);
                  world.moveVertically(num, false);
                } else if((dir.image).toUpperCase().equals("SOUTH")) {
                  world.moveVertically(num, false);
                } else if((dir.image).toUpperCase().equals("WEST")) {
                  num = num*(-1);
                  world.moveHorizontally(num,false);
                } else {
                  world.moveHorizontally(num,false);
                }

                salida += "Command:  MOVEINDIR " + (dir.image).toUpperCase() + "\u005cn";
            }
  }

  final public void jumpToThe() throws ParseException {
          int num = 1;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(JUMPTOTHE);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[19] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      dir = jj_consume_token(FRONT);
      break;
    case RIGHT:
      dir = jj_consume_token(RIGHT);
      break;
    case LEFT:
      dir = jj_consume_token(LEFT);
      break;
    case BACK:
      dir = jj_consume_token(BACK);
      break;
    default:
      jj_la1[20] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {
              if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                if((dir.image).toUpperCase().equals("FRONT")) {
                  num = num*(-1);
                  world.moveVertically(num, true);
                } else if((dir.image).toUpperCase().equals("BACK")) {
                  world.moveVertically(num, true);
                } else if((dir.image).toUpperCase().equals("LEFT")) {
                  num = num*(-1);
                  world.moveHorizontally(num,true);
                } else {
                  world.moveHorizontally(num,true);
                }


                salida += "Command:  JUMPTOTHE " + (dir.image).toUpperCase() + "\u005cn";
            }
  }

  final public void jumpInDir() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(JUMPINDIR);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[21] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      dir = jj_consume_token(NORTH);
      break;
    case SOUTH:
      dir = jj_consume_token(SOUTH);
      break;
    case EAST:
      dir = jj_consume_token(EAST);
      break;
    case WEST:
      dir = jj_consume_token(WEST);
      break;
    default:
      jj_la1[22] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {

              if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                turnTo(dir);

              if((dir.image).toUpperCase().equals("NORTH")) {
                  num = num*(-1);
                  world.moveVertically(num, true);
                } else if((dir.image).toUpperCase().equals("SOUTH")) {
                  world.moveVertically(num, true);
                } else if((dir.image).toUpperCase().equals("WEST")) {
                  num = num*(-1);
                  world.moveHorizontally(num,true);
                } else {
                  world.moveHorizontally(num,true);
                }

                salida += "Command:  JUMPINDIR " + (dir.image).toUpperCase() + "\u005cn";
            }
  }

// ---------------------------------------------------------------------------------------



// ------------------------------METODOS DE CONDICIONES-----------------------------------
  final public Boolean facing() throws ParseException {
          Token dir = new Token();
    jj_consume_token(FACING);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      dir = jj_consume_token(NORTH);
      break;
    case SOUTH:
      dir = jj_consume_token(SOUTH);
      break;
    case EAST:
      dir = jj_consume_token(EAST);
      break;
    case WEST:
      dir = jj_consume_token(WEST);
      break;
    default:
      jj_la1[23] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
             if(ejecutar == true) {

               int facing = world.getFacing();
                        int facingDir = 0;
                        String strDir = (dir.image).toUpperCase();

                        if(strDir.equals("SOUTH")) facingDir = 1;
                        else if(strDir.equals("EAST")) facingDir = 2;
                        else if(strDir.equals("WEST")) facingDir = 3;


                        {if (true) return (facing == facingDir);}
             } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean canPut() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token obj = new Token();
    jj_consume_token(CANPUT);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[24] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BALLOONS:
      obj = jj_consume_token(BALLOONS);
      break;
    case CHIPS:
      obj = jj_consume_token(CHIPS);
      break;
    default:
      jj_la1[25] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {

                        if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

            String strObj = (obj.image).toUpperCase();

              if(strObj.equals("CHIPS")) {

                if(world.freeSpacesForChips() >= num) {
                  {if (true) return true;}
                } else {if (true) return false;}
              }

              else {
                if(world.getMyBalloons() >= num) {
                  {if (true) return true;}
                } else {if (true) return false;}
              }

            } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean canPick() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token obj = new Token();
    jj_consume_token(CANPICK);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[26] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case BALLOONS:
      obj = jj_consume_token(BALLOONS);
      break;
    case CHIPS:
      obj = jj_consume_token(CHIPS);
      break;
    default:
      jj_la1[27] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
            if(ejecutar == true) {

                        if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

            String strObj = (obj.image).toUpperCase();

              if(strObj.equals("CHIPS")) {

                if(world.chipsToPick() >= num) {
                  {if (true) return true;}
                } else {if (true) return false;}
              }

              else {
                if(world.countBalloons() >= num) {
                  {if (true) return true;}
                } else {if (true) return false;}
              }

            } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean canMoveInDir() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(CANMOVEINDIR);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[28] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      dir = jj_consume_token(NORTH);
      break;
    case SOUTH:
      dir = jj_consume_token(SOUTH);
      break;
    case EAST:
      dir = jj_consume_token(EAST);
      break;
    case WEST:
      dir = jj_consume_token(WEST);
      break;
    default:
      jj_la1[29] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {

            String strDir = (dir.image).toUpperCase();

            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                if(strDir.equals("NORTH")) {
                  try {
                    world.moveVertically((-num), false);
                    world.moveVertically(num, false);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("SOUTH")) {
                  try {
                    world.moveVertically(num, false);
                    world.moveVertically((-num), false);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("EAST")) {
                  try {
                    world.moveHorizontally(num, false);
                    world.moveHorizontally((-num), false);
                    {if (true) return true;}
                  } catch (Exception e) {

                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("WEST")) {
                  try {
                    world.moveHorizontally((-num), false);
                    world.moveHorizontally(num, false);
                    {if (true) return true;}
                  } catch (Exception e) {

                    {if (true) return false;}
                  }
                }
          } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean canJumpInDir() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(CANJUMPINDIR);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[30] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NORTH:
      dir = jj_consume_token(NORTH);
      break;
    case SOUTH:
      dir = jj_consume_token(SOUTH);
      break;
    case EAST:
      dir = jj_consume_token(EAST);
      break;
    case WEST:
      dir = jj_consume_token(WEST);
      break;
    default:
      jj_la1[31] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {

            String strDir = (dir.image).toUpperCase();

            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                if(strDir.equals("NORTH")) {
                  try {
                    world.moveVertically((-num), true);
                    world.moveVertically(num, true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("SOUTH")) {
                  try {
                    world.moveVertically(num, true);
                    world.moveVertically((-num), true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("EAST")) {
                  try {
                    world.moveHorizontally(num, true);
                    world.moveHorizontally((-num), true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("WEST")) {
                  try {
                    world.moveHorizontally((-num), true);
                    world.moveHorizontally(num, true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }
          } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean canMoveToThe() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(CANMOVETOTHE);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[32] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      dir = jj_consume_token(FRONT);
      break;
    case RIGHT:
      dir = jj_consume_token(RIGHT);
      break;
    case LEFT:
      dir = jj_consume_token(LEFT);
      break;
    case BACK:
      dir = jj_consume_token(BACK);
      break;
    default:
      jj_la1[33] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {

            String strDir = (dir.image).toUpperCase();

            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                if(strDir.equals("FRONT")) {
                  try {
                    world.moveVertically((-num), false);
                    world.moveVertically(num, false);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("BACK")) {
                  try {
                    world.moveVertically(num, false);
                    world.moveVertically((-num), false);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("RIGHT")) {
                  try {
                    world.moveHorizontally(num, false);
                    world.moveHorizontally((-num), false);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("LEFT")) {
                  try {
                    world.moveHorizontally((-num), false);
                    world.moveHorizontally(num, false);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }
          } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public Boolean canJumpToThe() throws ParseException {
          int num = 0;
          Token name = new Token();
          Token dir = new Token();
    jj_consume_token(CANJUMPTOTHE);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[34] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    jj_consume_token(53);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case FRONT:
      dir = jj_consume_token(FRONT);
      break;
    case RIGHT:
      dir = jj_consume_token(RIGHT);
      break;
    case LEFT:
      dir = jj_consume_token(LEFT);
      break;
    case BACK:
      dir = jj_consume_token(BACK);
      break;
    default:
      jj_la1[35] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(ejecutar == true) {

            String strDir = (dir.image).toUpperCase();

            if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }

                if(strDir.equals("FRONT")) {
                  try {
                    world.moveVertically((-num), true);
                    world.moveVertically(num, true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("BACK")) {
                  try {
                    world.moveVertically(num, true);
                    world.moveVertically((-num), true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("RIGHT")) {
                  try {
                    world.moveHorizontally(num, true);
                    world.moveHorizontally((-num), true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }

                else if(strDir.equals("LEFT")) {
                  try {
                    world.moveHorizontally((-num), true);
                    world.moveHorizontally(num, true);
                    {if (true) return true;}
                  } catch (Exception e) {
                    {if (true) return false;}
                  }
                }
          } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

  final public boolean conditionNot() throws ParseException {
          boolean cond;
    jj_consume_token(NOT);
    jj_consume_token(54);
    cond = conditions();
          if(ejecutar == true) {

            if(cond == true) {
              {if (true) return false;}
            } else {
              {if (true) return true;}
            }
          } else {if (true) return false;}
    throw new Error("Missing return statement in function");
  }

//---------------------------------------------------------------------------------------


//--------------------------------ESTRUCTURAS DE CONTROL---------------------------------
  final public void conditional() throws ParseException {
          boolean cond;
    jj_consume_token(IF);
    jj_consume_token(54);
    cond = conditions();
    jj_consume_token(THEN);
    jj_consume_token(54);
            if(cond) {
            instructions();
            }
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE:
    case PUT:
    case PICK:
    case ASSIGNTO:
    case GOTO:
    case TURN:
    case FACE:
    case MOVETOTHE:
    case MOVEINDIR:
    case JUMPTOTHE:
    case JUMPINDIR:
    case NOP:
    case IF:
    case WHILE:
    case REPEAT:
    case 56:
      instructions();
      break;
    default:
      jj_la1[36] = jj_gen;
      ;
    }
    jj_consume_token(ELSE);
    jj_consume_token(54);
              if(!cond) {
              instructions();
              }
    if (jj_2_1(2)) {
      instructions();
    } else {
      ;
    }
  }

  final public void loop() throws ParseException {
          boolean cond;
    jj_consume_token(WHILE);
    jj_consume_token(54);
                         Token t10 = getToken(0); Token t11 = getToken(1); Token t12 = getToken(2); Token t13 = getToken(3); Token t14 = getToken(4); Token t15 = getToken(5);
    cond = conditions();
                                                                                                                                                                                                      System.out.println(cond);
    jj_consume_token(DO);
    jj_consume_token(54);
    loop2(cond, t10, t11, t12, t13, t14, t15);
  }

  final public void loop2(boolean cond, Token t10, Token t11, Token t12, Token t13, Token t14, Token t15) throws ParseException {
                Token t0, t1, t2, t3, t4, t5;
                t0 = getToken(0);
                t1 = getToken(1);
                t2 = getToken(2);
                t3 = getToken(3);
                t4 = getToken(4);
                t5 = getToken(5);


                while(cond) {

                        token = t10;
                  token.next = t11;
                  token.next.next = t12;
                  token.next.next.next = t13;
                  token.next.next.next.next = t14;
                  token.next.next.next.next.next = t15;

                        cond = conditions();

                        token = t0;
                  token.next = t1;
                  token.next.next = t2;
                  token.next.next.next = t3;
                  token.next.next.next.next = t4;
                  token.next.next.next.next.next = t5;

                  if(cond==false) {
                    break;
                  } else {
                    instructions();

                  }

                  }
    if (jj_2_2(2)) {
      instructions();
    } else {
      ;
    }
  }

  final public void repeatTimes() throws ParseException {
          int num = 0;
          Token name = new Token();
    jj_consume_token(REPEAT);
    jj_consume_token(54);
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case NUM:
      num = num();
      break;
    case NAME:
      name = jj_consume_token(NAME);
      break;
    default:
      jj_la1[37] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
          if(name.image != null && mapaVariables.containsKey(name.image)) {
                  num = mapaVariables.get(name.image);
                } else if (name.image != null && !mapaVariables.containsKey(name.image)) {
                  {if (true) throw new Error("La variable "+name.image+" debe ser declarada antes de usarse.");}
                }
    repeatBlock(num);
  }

  final public void repeatBlock(int num) throws ParseException {
            Token t0, t1, t2, t3, t4, t5, t6, t7, t8;
                t0 = getToken(0);
                t1 = getToken(1);
                t2 = getToken(2);
                t3 = getToken(3);
                t4 = getToken(4);
                t5 = getToken(5);
                t6 = getToken(6);
                t7 = getToken(7);
                t8 = getToken(8);

                for(int i = 0; i<num; i++) {

                  token = t0;
                  token.next = t1;
                  token.next.next = t2;
                  token.next.next.next = t3;
                  token.next.next.next.next = t4;
                  token.next.next.next.next.next = t5;
                  token.next.next.next.next.next.next = t6;
                  token.next.next.next.next.next.next.next = t7;
                  token.next.next.next.next.next.next.next.next = t8;
                  instructions();
                }
  }

//---------------------------------------------------------------------------------------



// -------------------------------PRODUCCIONES--------------------------------------------
  final public int one_line() throws ParseException {
    robot();
        {if (true) return (int) Math.pow(2,3);}
    throw new Error("Missing return statement in function");
  }

  final public void robot() throws ParseException {
    jj_consume_token(ROBOT_R);
    vars();
    procedures();
    inst();
  }

  final public void vars() throws ParseException {
        Token var = new Token();
    jj_consume_token(VARS);
    label_1:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[38] = jj_gen;
        break label_1;
      }
      var = jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        break;
      default:
        jj_la1[39] = jj_gen;
        ;
      }
                                             listaVariables.add(var.image);
    }
    jj_consume_token(55);
  }

  final public void listofnames() throws ParseException {
    label_2:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[40] = jj_gen;
        break label_2;
      }
      jj_consume_token(NAME);
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 53:
        jj_consume_token(53);
        break;
      default:
        jj_la1[41] = jj_gen;
        ;
      }
    }
  }

  final public void procedures() throws ParseException {
        ejecutar = false;
    jj_consume_token(PROCS);
    label_3:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case NAME:
        ;
        break;
      default:
        jj_la1[42] = jj_gen;
        break label_3;
      }
      procdef();
    }
  }

  final public void procdef() throws ParseException {
    jj_consume_token(NAME);
    jj_consume_token(56);
    parameters();
    instructions();
    jj_consume_token(57);
  }

  final public void parameters() throws ParseException {
    jj_consume_token(58);
    listofnames();
    jj_consume_token(58);
  }

//	void instructions() :
//	{
//	
//	}
//	
//	{
// 	"[" (instruction())+ "]" | ((instruction())+)
//
//	}
  final public void instructions() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case 56:
      jj_consume_token(56);
      instructionsAux();
      jj_consume_token(57);
      break;
    case MOVE:
    case PUT:
    case PICK:
    case ASSIGNTO:
    case GOTO:
    case TURN:
    case FACE:
    case MOVETOTHE:
    case MOVEINDIR:
    case JUMPTOTHE:
    case JUMPINDIR:
    case NOP:
    case IF:
    case WHILE:
    case REPEAT:
      instructionsAux2();
      break;
    default:
      jj_la1[43] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
  }

  final public void instructionsAux() throws ParseException {
    label_4:
    while (true) {
      if (jj_2_3(2)) {
        ;
      } else {
        break label_4;
      }
      instruction();
    }
  }

  final public void instructionsAux2() throws ParseException {
    label_5:
    while (true) {
      instruction();
      if (jj_2_4(2)) {
        ;
      } else {
        break label_5;
      }
    }
  }

  final public void instruction() throws ParseException {
    switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
    case MOVE:
    case PUT:
    case PICK:
    case ASSIGNTO:
    case GOTO:
    case TURN:
    case FACE:
    case MOVETOTHE:
    case MOVEINDIR:
    case JUMPTOTHE:
    case JUMPINDIR:
    case NOP:
      command2();
      break;
    case IF:
      conditional();
      break;
    case WHILE:
      loop();
      break;
    case REPEAT:
      repeatTimes();
      break;
    default:
      jj_la1[44] = jj_gen;
      jj_consume_token(-1);
      throw new ParseException();
    }
    if (jj_2_5(2)) {
      jj_consume_token(55);
    } else {
      ;
    }
  }

  final public void inst() throws ParseException {
         if(ejecutar == false) {
          ejecutar = true;}
    jj_consume_token(56);
    label_6:
    while (true) {
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case PUT:
      case PICK:
      case ASSIGNTO:
      case GOTO:
      case TURN:
      case FACE:
      case MOVETOTHE:
      case MOVEINDIR:
      case JUMPTOTHE:
      case JUMPINDIR:
      case NOP:
      case IF:
      case WHILE:
      case REPEAT:
      case NAME:
        ;
        break;
      default:
        jj_la1[45] = jj_gen;
        break label_6;
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case MOVE:
      case PUT:
      case PICK:
      case ASSIGNTO:
      case GOTO:
      case TURN:
      case FACE:
      case MOVETOTHE:
      case MOVEINDIR:
      case JUMPTOTHE:
      case JUMPINDIR:
      case NOP:
      case IF:
      case WHILE:
      case REPEAT:
        instruction();
        break;
      case NAME:
        jj_consume_token(NAME);
        jj_consume_token(54);
        label_7:
        while (true) {
          if (jj_2_6(2)) {
            ;
          } else {
            break label_7;
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case NUM:
            num();
            break;
          case NAME:
            jj_consume_token(NAME);
            break;
          default:
            jj_la1[46] = jj_gen;
            jj_consume_token(-1);
            throw new ParseException();
          }
          switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
          case 53:
            jj_consume_token(53);
            break;
          default:
            jj_la1[47] = jj_gen;
            ;
          }
        }
        break;
      default:
        jj_la1[48] = jj_gen;
        jj_consume_token(-1);
        throw new ParseException();
      }
      switch ((jj_ntk==-1)?jj_ntk():jj_ntk) {
      case 55:
        jj_consume_token(55);
        break;
      default:
        jj_la1[49] = jj_gen;
        ;
      }
    }
    jj_consume_token(57);
  }

// ---------------------------------------------------------------------------------------


        /**
	 * Unsigned decimal number
	 * @return the corresponding value of the string
	 * @error  corresponding value is too large
	 */
  final public int num() throws ParseException, Error {
                int total=1;
    jj_consume_token(NUM);
                        try
                        {
                                total = Integer.parseInt(token.image);
                        }
                        catch (NumberFormatException ee)
                        {
                                {if (true) throw new Error("Numero fuera de rango: "+token.image+" !!");}
                        }
                        {if (true) return total;}
    throw new Error("Missing return statement in function");
  }

  private boolean jj_2_1(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_1(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(0, xla); }
  }

  private boolean jj_2_2(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_2(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(1, xla); }
  }

  private boolean jj_2_3(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_3(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(2, xla); }
  }

  private boolean jj_2_4(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_4(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(3, xla); }
  }

  private boolean jj_2_5(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_5(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(4, xla); }
  }

  private boolean jj_2_6(int xla) {
    jj_la = xla; jj_lastpos = jj_scanpos = token;
    try { return !jj_3_6(); }
    catch(LookaheadSuccess ls) { return true; }
    finally { jj_save(5, xla); }
  }

  private boolean jj_3R_39() {
    if (jj_scan_token(TURN)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_45() {
    if (jj_scan_token(JUMPTOTHE)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_23() {
    if (jj_scan_token(REPEAT)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_6() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_10()) {
    jj_scanpos = xsp;
    if (jj_scan_token(49)) return true;
    }
    xsp = jj_scanpos;
    if (jj_scan_token(53)) jj_scanpos = xsp;
    return false;
  }

  private boolean jj_3R_16() {
    if (jj_3R_23()) return true;
    return false;
  }

  private boolean jj_3_2() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_17() {
    if (jj_scan_token(NUM)) return true;
    return false;
  }

  private boolean jj_3R_15() {
    if (jj_3R_22()) return true;
    return false;
  }

  private boolean jj_3R_42() {
    if (jj_scan_token(PICK)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_38() {
    if (jj_scan_token(MOVE)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_14() {
    if (jj_3R_21()) return true;
    return false;
  }

  private boolean jj_3R_44() {
    if (jj_scan_token(MOVEINDIR)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_13() {
    if (jj_3R_20()) return true;
    return false;
  }

  private boolean jj_3R_35() {
    if (jj_scan_token(NOP)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_9() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_13()) {
    jj_scanpos = xsp;
    if (jj_3R_14()) {
    jj_scanpos = xsp;
    if (jj_3R_15()) {
    jj_scanpos = xsp;
    if (jj_3R_16()) return true;
    }
    }
    }
    return false;
  }

  private boolean jj_3R_34() {
    if (jj_3R_46()) return true;
    return false;
  }

  private boolean jj_3R_41() {
    if (jj_scan_token(PUT)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3_4() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_33() {
    if (jj_3R_45()) return true;
    return false;
  }

  private boolean jj_3R_19() {
    Token xsp;
    if (jj_3_4()) return true;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_4()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_32() {
    if (jj_3R_44()) return true;
    return false;
  }

  private boolean jj_3R_31() {
    if (jj_3R_43()) return true;
    return false;
  }

  private boolean jj_3R_30() {
    if (jj_3R_42()) return true;
    return false;
  }

  private boolean jj_3_3() {
    if (jj_3R_9()) return true;
    return false;
  }

  private boolean jj_3R_46() {
    if (jj_scan_token(JUMPINDIR)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_18() {
    Token xsp;
    while (true) {
      xsp = jj_scanpos;
      if (jj_3_3()) { jj_scanpos = xsp; break; }
    }
    return false;
  }

  private boolean jj_3R_29() {
    if (jj_3R_41()) return true;
    return false;
  }

  private boolean jj_3R_28() {
    if (jj_3R_40()) return true;
    return false;
  }

  private boolean jj_3R_22() {
    if (jj_scan_token(WHILE)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_37() {
    if (jj_scan_token(GOTO)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_27() {
    if (jj_3R_39()) return true;
    return false;
  }

  private boolean jj_3R_26() {
    if (jj_3R_38()) return true;
    return false;
  }

  private boolean jj_3R_12() {
    if (jj_3R_19()) return true;
    return false;
  }

  private boolean jj_3R_25() {
    if (jj_3R_37()) return true;
    return false;
  }

  private boolean jj_3_1() {
    if (jj_3R_8()) return true;
    return false;
  }

  private boolean jj_3R_11() {
    if (jj_scan_token(56)) return true;
    if (jj_3R_18()) return true;
    if (jj_scan_token(57)) return true;
    return false;
  }

  private boolean jj_3R_8() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_11()) {
    jj_scanpos = xsp;
    if (jj_3R_12()) return true;
    }
    return false;
  }

  private boolean jj_3R_20() {
    Token xsp;
    xsp = jj_scanpos;
    if (jj_3R_24()) {
    jj_scanpos = xsp;
    if (jj_3R_25()) {
    jj_scanpos = xsp;
    if (jj_3R_26()) {
    jj_scanpos = xsp;
    if (jj_3R_27()) {
    jj_scanpos = xsp;
    if (jj_3R_28()) {
    jj_scanpos = xsp;
    if (jj_3R_29()) {
    jj_scanpos = xsp;
    if (jj_3R_30()) {
    jj_scanpos = xsp;
    if (jj_3R_31()) {
    jj_scanpos = xsp;
    if (jj_3R_32()) {
    jj_scanpos = xsp;
    if (jj_3R_33()) {
    jj_scanpos = xsp;
    if (jj_3R_34()) {
    jj_scanpos = xsp;
    if (jj_3R_35()) return true;
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    }
    return false;
  }

  private boolean jj_3R_24() {
    if (jj_3R_36()) return true;
    return false;
  }

  private boolean jj_3R_43() {
    if (jj_scan_token(MOVETOTHE)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_21() {
    if (jj_scan_token(IF)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_10() {
    if (jj_3R_17()) return true;
    return false;
  }

  private boolean jj_3_5() {
    if (jj_scan_token(55)) return true;
    return false;
  }

  private boolean jj_3R_40() {
    if (jj_scan_token(FACE)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  private boolean jj_3R_36() {
    if (jj_scan_token(ASSIGNTO)) return true;
    if (jj_scan_token(54)) return true;
    return false;
  }

  /** Generated Token Manager. */
  public RobotTokenManager token_source;
  SimpleCharStream jj_input_stream;
  /** Current token. */
  public Token token;
  /** Next token. */
  public Token jj_nt;
  private int jj_ntk;
  private Token jj_scanpos, jj_lastpos;
  private int jj_la;
  private int jj_gen;
  final private int[] jj_la1 = new int[50];
  static private int[] jj_la1_0;
  static private int[] jj_la1_1;
  static {
      jj_la1_init_0();
      jj_la1_init_1();
   }
   private static void jj_la1_init_0() {
      jj_la1_0 = new int[] {0x1fe0,0x1fe1,0xff81a0,0xc0000000,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x40,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x0,0x40,0x0,0x40,0x29ff81a0,0x0,0x0,0x0,0x0,0x0,0x0,0x29ff81a0,0x29ff81a0,0x29ff81a0,0x0,0x0,0x29ff81a0,0x0,};
   }
   private static void jj_la1_init_1() {
      jj_la1_1 = new int[] {0x0,0x0,0x0,0x3f,0x18000,0x18000,0x24000,0x24000,0x24000,0x280,0x3c00,0x24000,0x18000,0x24000,0x18000,0x24000,0x1c0,0x24000,0x3c00,0x24000,0x1c0,0x24000,0x3c00,0x3c00,0x24000,0x18000,0x24000,0x18000,0x24000,0x3c00,0x24000,0x3c00,0x24000,0x1c0,0x24000,0x1c0,0x1000000,0x24000,0x20000,0x200000,0x20000,0x200000,0x20000,0x1000000,0x0,0x20000,0x24000,0x200000,0x20000,0x800000,};
   }
  final private JJCalls[] jj_2_rtns = new JJCalls[6];
  private boolean jj_rescan = false;
  private int jj_gc = 0;

  /** Constructor with InputStream. */
  public Robot(java.io.InputStream stream) {
     this(stream, null);
  }
  /** Constructor with InputStream and supplied encoding */
  public Robot(java.io.InputStream stream, String encoding) {
    try { jj_input_stream = new SimpleCharStream(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream) {
     ReInit(stream, null);
  }
  /** Reinitialise. */
  public void ReInit(java.io.InputStream stream, String encoding) {
    try { jj_input_stream.ReInit(stream, encoding, 1, 1); } catch(java.io.UnsupportedEncodingException e) { throw new RuntimeException(e); }
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor. */
  public Robot(java.io.Reader stream) {
    jj_input_stream = new SimpleCharStream(stream, 1, 1);
    token_source = new RobotTokenManager(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(java.io.Reader stream) {
    jj_input_stream.ReInit(stream, 1, 1);
    token_source.ReInit(jj_input_stream);
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Constructor with generated Token Manager. */
  public Robot(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  /** Reinitialise. */
  public void ReInit(RobotTokenManager tm) {
    token_source = tm;
    token = new Token();
    jj_ntk = -1;
    jj_gen = 0;
    for (int i = 0; i < 50; i++) jj_la1[i] = -1;
    for (int i = 0; i < jj_2_rtns.length; i++) jj_2_rtns[i] = new JJCalls();
  }

  private Token jj_consume_token(int kind) throws ParseException {
    Token oldToken;
    if ((oldToken = token).next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    if (token.kind == kind) {
      jj_gen++;
      if (++jj_gc > 100) {
        jj_gc = 0;
        for (int i = 0; i < jj_2_rtns.length; i++) {
          JJCalls c = jj_2_rtns[i];
          while (c != null) {
            if (c.gen < jj_gen) c.first = null;
            c = c.next;
          }
        }
      }
      return token;
    }
    token = oldToken;
    jj_kind = kind;
    throw generateParseException();
  }

  static private final class LookaheadSuccess extends java.lang.Error { }
  final private LookaheadSuccess jj_ls = new LookaheadSuccess();
  private boolean jj_scan_token(int kind) {
    if (jj_scanpos == jj_lastpos) {
      jj_la--;
      if (jj_scanpos.next == null) {
        jj_lastpos = jj_scanpos = jj_scanpos.next = token_source.getNextToken();
      } else {
        jj_lastpos = jj_scanpos = jj_scanpos.next;
      }
    } else {
      jj_scanpos = jj_scanpos.next;
    }
    if (jj_rescan) {
      int i = 0; Token tok = token;
      while (tok != null && tok != jj_scanpos) { i++; tok = tok.next; }
      if (tok != null) jj_add_error_token(kind, i);
    }
    if (jj_scanpos.kind != kind) return true;
    if (jj_la == 0 && jj_scanpos == jj_lastpos) throw jj_ls;
    return false;
  }


/** Get the next Token. */
  final public Token getNextToken() {
    if (token.next != null) token = token.next;
    else token = token.next = token_source.getNextToken();
    jj_ntk = -1;
    jj_gen++;
    return token;
  }

/** Get the specific Token. */
  final public Token getToken(int index) {
    Token t = token;
    for (int i = 0; i < index; i++) {
      if (t.next != null) t = t.next;
      else t = t.next = token_source.getNextToken();
    }
    return t;
  }

  private int jj_ntk() {
    if ((jj_nt=token.next) == null)
      return (jj_ntk = (token.next=token_source.getNextToken()).kind);
    else
      return (jj_ntk = jj_nt.kind);
  }

  private java.util.List<int[]> jj_expentries = new java.util.ArrayList<int[]>();
  private int[] jj_expentry;
  private int jj_kind = -1;
  private int[] jj_lasttokens = new int[100];
  private int jj_endpos;

  private void jj_add_error_token(int kind, int pos) {
    if (pos >= 100) return;
    if (pos == jj_endpos + 1) {
      jj_lasttokens[jj_endpos++] = kind;
    } else if (jj_endpos != 0) {
      jj_expentry = new int[jj_endpos];
      for (int i = 0; i < jj_endpos; i++) {
        jj_expentry[i] = jj_lasttokens[i];
      }
      jj_entries_loop: for (java.util.Iterator<?> it = jj_expentries.iterator(); it.hasNext();) {
        int[] oldentry = (int[])(it.next());
        if (oldentry.length == jj_expentry.length) {
          for (int i = 0; i < jj_expentry.length; i++) {
            if (oldentry[i] != jj_expentry[i]) {
              continue jj_entries_loop;
            }
          }
          jj_expentries.add(jj_expentry);
          break jj_entries_loop;
        }
      }
      if (pos != 0) jj_lasttokens[(jj_endpos = pos) - 1] = kind;
    }
  }

  /** Generate ParseException. */
  public ParseException generateParseException() {
    jj_expentries.clear();
    boolean[] la1tokens = new boolean[59];
    if (jj_kind >= 0) {
      la1tokens[jj_kind] = true;
      jj_kind = -1;
    }
    for (int i = 0; i < 50; i++) {
      if (jj_la1[i] == jj_gen) {
        for (int j = 0; j < 32; j++) {
          if ((jj_la1_0[i] & (1<<j)) != 0) {
            la1tokens[j] = true;
          }
          if ((jj_la1_1[i] & (1<<j)) != 0) {
            la1tokens[32+j] = true;
          }
        }
      }
    }
    for (int i = 0; i < 59; i++) {
      if (la1tokens[i]) {
        jj_expentry = new int[1];
        jj_expentry[0] = i;
        jj_expentries.add(jj_expentry);
      }
    }
    jj_endpos = 0;
    jj_rescan_token();
    jj_add_error_token(0, 0);
    int[][] exptokseq = new int[jj_expentries.size()][];
    for (int i = 0; i < jj_expentries.size(); i++) {
      exptokseq[i] = jj_expentries.get(i);
    }
    return new ParseException(token, exptokseq, tokenImage);
  }

  /** Enable tracing. */
  final public void enable_tracing() {
  }

  /** Disable tracing. */
  final public void disable_tracing() {
  }

  private void jj_rescan_token() {
    jj_rescan = true;
    for (int i = 0; i < 6; i++) {
    try {
      JJCalls p = jj_2_rtns[i];
      do {
        if (p.gen > jj_gen) {
          jj_la = p.arg; jj_lastpos = jj_scanpos = p.first;
          switch (i) {
            case 0: jj_3_1(); break;
            case 1: jj_3_2(); break;
            case 2: jj_3_3(); break;
            case 3: jj_3_4(); break;
            case 4: jj_3_5(); break;
            case 5: jj_3_6(); break;
          }
        }
        p = p.next;
      } while (p != null);
      } catch(LookaheadSuccess ls) { }
    }
    jj_rescan = false;
  }

  private void jj_save(int index, int xla) {
    JJCalls p = jj_2_rtns[index];
    while (p.gen > jj_gen) {
      if (p.next == null) { p = p.next = new JJCalls(); break; }
      p = p.next;
    }
    p.gen = jj_gen + xla - jj_la; p.first = token; p.arg = xla;
  }

  static final class JJCalls {
    int gen;
    Token first;
    int arg;
    JJCalls next;
  }

}
